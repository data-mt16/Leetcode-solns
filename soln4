#Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.


class Solution:
    def longestPalindrome(self, s: str) -> str:
        if len(s) <= 1:
            return s
            
        start, max_len = 0, 1

        for i in range(len(s)):
            
            for j in [i, i + 1]:
                left, right = i, j
                
                
                while left >= 0 and right < len(s) and s[left] == s[right]:
                    
                    if (right - left + 1) > max_len:
                        start = left
                        max_len = right - left + 1
                    
                    left -= 1
                    right += 1
                        
        return s[start : start + max_len]
